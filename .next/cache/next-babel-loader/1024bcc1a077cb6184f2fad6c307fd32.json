{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\n\n// create your reducer\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    tick: 'init'\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'TICK':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tick: action.payload\n      });\n\n    default:\n      return state;\n  }\n}; // create a makeStore function\n\n\nvar makeStore = function makeStore(context) {\n  return createStore(reducer);\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Project/testDevelopsToday/src/store.ts"],"names":["createStore","createWrapper","HYDRATE","reducer","state","tick","action","type","payload","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAAQA,WAAR,QAAqC,OAArC;AACA,SAAmBC,aAAnB,EAA2CC,OAA3C,QAAyD,oBAAzD;;AAMA;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAsD;AAAA,MAArDC,KAAqD,uEAAtC;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAsC;AAAA,MAAtBC,MAAsB;;AAClE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,OAAL;AACI;AACA,6CAAWE,KAAX,GAAqBE,MAAM,CAACE,OAA5B;;AACJ,SAAK,MAAL;AACI,6CAAWJ,KAAX;AAAkBC,QAAAA,IAAI,EAAEC,MAAM,CAACE;AAA/B;;AACJ;AACI,aAAOJ,KAAP;AAPR;AASH,CAVD,C,CAYA;;;AACA,IAAMK,SAA2B,GAAG,SAA9BA,SAA8B,CAACC,OAAD;AAAA,SAAsBV,WAAW,CAACG,OAAD,CAAjC;AAAA,CAApC,C,CAEA;;;AACA,OAAO,IAAMQ,OAAO,GAAGV,aAAa,CAAQQ,SAAR,EAAmB;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["import {createStore, AnyAction} from 'redux';\r\nimport {MakeStore, createWrapper, Context, HYDRATE} from 'next-redux-wrapper';\r\n\r\nexport interface State {\r\n    tick: string;\r\n}\r\n\r\n// create your reducer\r\nconst reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            // Attention! This will overwrite client state! Real apps should use proper reconciliation.\r\n            return {...state, ...action.payload};\r\n        case 'TICK':\r\n            return {...state, tick: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// create a makeStore function\r\nconst makeStore: MakeStore<State> = (context: Context) => createStore(reducer);\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}