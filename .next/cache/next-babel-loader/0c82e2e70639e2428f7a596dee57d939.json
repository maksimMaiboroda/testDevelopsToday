{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\n\nconst reducer = (state = {\n  tick: 'init'\n}, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        server: _objectSpread(_objectSpread({}, state.server), action.payload.server)\n      });\n\n    case 'SERVER_ACTION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        server: _objectSpread(_objectSpread({}, state.server), {}, {\n          tick: action.payload\n        })\n      });\n\n    case 'CLIENT_ACTION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        client: _objectSpread(_objectSpread({}, state.client), {}, {\n          tick: action.payload\n        })\n      });\n\n    default:\n      return state;\n  }\n}; // create a makeStore function\n\n\nconst makeStore = context => createStore(reducer); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Project/testDevelopsToday/src/store.ts"],"names":["createStore","createWrapper","HYDRATE","reducer","state","tick","action","type","server","payload","client","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAAuC,OAAvC;AACA,SAAoBC,aAApB,EAA4CC,OAA5C,QAA2D,oBAA3D;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAhB,EAAkCC,MAAlC,KAAwD;AACpE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,OAAL;AACI,6CACOE,KADP;AAEII,QAAAA,MAAM,kCACCJ,KAAK,CAACI,MADP,GAECF,MAAM,CAACG,OAAP,CAAeD,MAFhB;AAFV;;AAOJ,SAAK,eAAL;AACI,6CACOJ,KADP;AAEII,QAAAA,MAAM,kCACCJ,KAAK,CAACI,MADP;AAEFH,UAAAA,IAAI,EAAEC,MAAM,CAACG;AAFX;AAFV;;AAOJ,SAAK,eAAL;AACI,6CACOL,KADP;AAEIM,QAAAA,MAAM,kCACCN,KAAK,CAACM,MADP;AAEFL,UAAAA,IAAI,EAAEC,MAAM,CAACG;AAFX;AAFV;;AAOJ;AACI,aAAOL,KAAP;AA1BR;AA4BH,CA7BD,C,CA+BA;;;AACA,MAAMO,SAA2B,GAAIC,OAAD,IAAuBZ,WAAW,CAACG,OAAD,CAAtE,C,CAEA;;;AACA,OAAO,MAAMU,OAAO,GAAGZ,aAAa,CAAQU,SAAR,EAAmB;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAnB,CAA7B","sourcesContent":["import { createStore, AnyAction } from 'redux';\r\nimport { MakeStore, createWrapper, Context, HYDRATE } from 'next-redux-wrapper';\r\nimport promise from 'redux-promise-middleware'\r\n\r\nexport interface State {\r\n    server: any;\r\n    client: any;\r\n}\r\n\r\nconst reducer = (state: State = { tick: 'init' }, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            return {\r\n                ...state,\r\n                server: {\r\n                    ...state.server,\r\n                    ...action.payload.server,\r\n                },\r\n            };\r\n        case 'SERVER_ACTION':\r\n            return {\r\n                ...state,\r\n                server: {\r\n                    ...state.server,\r\n                    tick: action.payload,\r\n                },\r\n            };\r\n        case 'CLIENT_ACTION':\r\n            return {\r\n                ...state,\r\n                client: {\r\n                    ...state.client,\r\n                    tick: action.payload,\r\n                },\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// create a makeStore function\r\nconst makeStore: MakeStore<State> = (context: Context) =>  createStore(reducer);\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper<State>(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}